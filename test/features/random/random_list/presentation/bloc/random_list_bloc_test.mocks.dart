// Mocks generated by Mockito 5.1.0 from annotations
// in random_pick/test/features/random/random_list/presentation/bloc/random_list_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:random_pick/core/error/failures.dart' as _i6;
import 'package:random_pick/core/utils/input_converter.dart' as _i8;
import 'package:random_pick/features/random/random_list/domain/entities/item.dart'
    as _i10;
import 'package:random_pick/features/random/random_list/domain/entities/random_item_picked.dart'
    as _i7;
import 'package:random_pick/features/random/random_list/domain/repositories/random_list_repository.dart'
    as _i2;
import 'package:random_pick/features/random/random_list/domain/usecases/get_random_item.dart'
    as _i4;
import 'package:random_pick/features/random/random_number/domain/entities/number_range.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeRandomListRepository_0 extends _i1.Fake
    implements _i2.RandomListRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetRandomItem].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomItem extends _i1.Mock implements _i4.GetRandomItem {
  MockGetRandomItem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RandomListRepository get repository => (super.noSuchMethod(
      Invocation.getter(#repository),
      returnValue: _FakeRandomListRepository_0()) as _i2.RandomListRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.RandomItemPicked>> call(
          _i4.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i6.Failure, _i7.RandomItemPicked>>.value(
                      _FakeEither_1<_i6.Failure, _i7.RandomItemPicked>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.RandomItemPicked>>);
}

/// A class which mocks [InputConverter].
///
/// See the documentation for Mockito's code generation for more information.
class MockInputConverter extends _i1.Mock implements _i8.InputConverter {
  MockInputConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Either<_i6.Failure, _i9.NumberRange> stringsToNumberRange(
          String? min, String? max) =>
      (super.noSuchMethod(Invocation.method(#stringsToNumberRange, [min, max]),
              returnValue: _FakeEither_1<_i6.Failure, _i9.NumberRange>())
          as _i3.Either<_i6.Failure, _i9.NumberRange>);
  @override
  List<_i10.Item> stringsToItemPool(List<String>? itemPool) =>
      (super.noSuchMethod(Invocation.method(#stringsToItemPool, [itemPool]),
          returnValue: <_i10.Item>[]) as List<_i10.Item>);
}
