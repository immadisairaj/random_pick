// Mocks generated by Mockito 5.1.0 from annotations
// in random_pick/test/features/random/random_list/data/repositories/random_list_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:random_pick/features/random/random_list/data/datasources/random_list_data_source.dart'
    as _i3;
import 'package:random_pick/features/random/random_list/data/models/item_model.dart'
    as _i5;
import 'package:random_pick/features/random/random_list/data/models/random_item_picked_model.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeRandomItemPickedModel_0 extends _i1.Fake
    implements _i2.RandomItemPickedModel {}

/// A class which mocks [RandomListDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomListDataSource extends _i1.Mock
    implements _i3.RandomListDataSource {
  MockRandomListDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i4.Stream<List<_i5.ItemModel>>> getItemPool() =>
      (super.noSuchMethod(Invocation.method(#getItemPool, []),
              returnValue: Future<_i4.Stream<List<_i5.ItemModel>>>.value(
                  Stream<List<_i5.ItemModel>>.empty()))
          as _i4.Future<_i4.Stream<List<_i5.ItemModel>>>);
  @override
  _i4.Future<_i2.RandomItemPickedModel> getRandomItem() =>
      (super.noSuchMethod(Invocation.method(#getRandomItem, []),
              returnValue: Future<_i2.RandomItemPickedModel>.value(
                  _FakeRandomItemPickedModel_0()))
          as _i4.Future<_i2.RandomItemPickedModel>);
  @override
  _i4.Future<void> addItemToPool(_i5.ItemModel? item) =>
      (super.noSuchMethod(Invocation.method(#addItemToPool, [item]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> removeItemFromPool(_i5.ItemModel? item) =>
      (super.noSuchMethod(Invocation.method(#removeItemFromPool, [item]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> clearItemPool() =>
      (super.noSuchMethod(Invocation.method(#clearItemPool, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> updateItemPool(List<_i5.ItemModel>? items) =>
      (super.noSuchMethod(Invocation.method(#updateItemPool, [items]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
